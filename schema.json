{
  "title": "BlockProducer",
  "description": "Information about a block producer on the EOS blockchain",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "definitions": {
    "location": {
      "type": "object",
      "required": [
        "name",
        "country"
      ],
      "properties": {
        "name": {
          "description": "Location in human readable format [City, State]",
          "type": "string"
        },
        "country": {
          "description": "ISO 3166-1 alpha 2 country code [XX]",
          "type": "string",
          "maxLength": 2,
          "minLength": 2,
          "pattern": "^[A-Z]+$"
        },
        "latitude": {
          "description": "Latitude in decimal degrees",
          "type": "number"
        },
        "longitude": {
          "description": "Longitude in decimal degrees",
          "type": "number"
        }
      }
    },
    "required_website_url": {
      "type": "string",
      "format": "uri",
      "pattern": "^https?://.+[^\/]$"
    },
    "optional_url": {
      "type": "string",
      "if": {
        "pattern": ".+"
      },
      "then": {
        "format": "uri",
        "pattern": "^https?://"
      }
    },
    "username": {
      "type": "string",
      "pattern": "^[\\w\\d_\\-\\.]*$"
    }
  },
  "type": "object",
  "required": [
    "producer_account_name",
    "org",
    "nodes"
  ],
  "additionalProperties": false,
  "properties": {
    "producer_account_name": {
      "$id": "/properties/producer_account_name",
      "description": "Producer account name",
      "type": "string",
      "maxLength": 12,
      "minLength": 1,
      "pattern": "^[\\.12345a-z]+$"
    },
    "org": {
      "type": "object",
      "properties": {
        "location": {
          "$ref": "#/definitions/location",
          "description": "Organization location"
        },
        "candidate_name": {
          "$id": "/properties/org/properties/candidate_name",
          "description": "Producer/organization name",
          "type": "string"
        },
        "website": {
          "$ref": "#/definitions/required_website_url",
          "description": "Organization website"
        },
        "code_of_conduct": {
          "$ref": "#/definitions/optional_url",
          "description": "Link to Code of Conduct"
        },
        "ownership_disclosure": {
          "$ref": "#/definitions/optional_url",
          "description": "Link to company ownership disclosure"
        },
        "email": {
          "$id": "/properties/org/properties/email",
          "description": "Organization email",
          "type": "string",
          "format": "email"
        },
        "branding": {
          "type": "object",
          "properties":{
            "logo_256": {
              "$ref": "#/definitions/optional_url",
              "description": "Link to Organization logo [PNG format, 256x256]"
            },
            "logo_1024": {
              "$ref": "#/definitions/optional_url",
              "description": "Link to Organization logo [PNG format, 1024x1024]"
            },
            "logo_svg": {
              "$ref": "#/definitions/optional_url",
              "description": "Link to Organization logo [SVG format]"
            }
          }
        },
        "social": {
          "type": "object",
          "properties": {
            "facebook": {
              "$ref": "#/definitions/username",
              "description": "group/page address only, not the entire url"
            },
            "github": {
              "$ref": "#/definitions/username",
              "description": "username only"
            },
            "keybase": {
              "$ref": "#/definitions/username",
              "description": "username only"
            },
            "reddit": {
              "$ref": "#/definitions/username",
              "description": "username only"
            },
            "steemit": {
              "$ref": "#/definitions/username",
              "description": "username only, WITHOUT @"
            },
            "telegram": {
              "$ref": "#/definitions/username",
              "description": "username only"
            },
            "twitter": {
              "$ref": "#/definitions/username",
              "description": "username only"
            },
            "wechat": {
              "$ref": "#/definitions/username",
              "description": "username only"
            },
            "youtube": {
              "$ref": "#/definitions/username",
              "description": "channel address only"
            }
          }
        }
      },
      "required": [
        "location",
        "candidate_name",
        "website"
      ]
    },
    "nodes": {
      "type": "array",
      "uniqueItems": true,
      "items": {
        "type": "object",
        "properties": {
          "location": {
            "$ref": "#/definitions/location",
            "description": "Node location"
          },
          "is_producer": {
            "description": "Is this node a producer? (deprecated: use node_type instead)",
            "type": "boolean"
          },
          "node_type": {
            "description": "Type of service",
            "oneOf": [
              {
                "type": "array",
                "uniqueItems": true,
                "items": {
                  "type": "string",
                  "enum": ["producer", "full", "query", "seed"]
                }
              },
              {
                "type": "string",
                "enum": ["producer", "full", "query", "seed"]
              }
            ]
          },
          "p2p_endpoint": {
            "description": "EOSIO P2P endpoint (host:port)",
            "type": "string"
          },
          "bnet_endpoint": {
            "description": "EOSIO BNET endpoint (host:port)",
            "type": "string"
          },
          "api_endpoint": {
            "description": "EOSIO HTTP endpoint (http://host:port)",
            "type": "string",
            "if": {
              "pattern": ".+"
            },
            "then": {
              "format": "uri",
              "pattern": "^http://"
            }
          },
          "ssl_endpoint": {
            "description": "EOSIO HTTPS endpoint (https://host:port)",
            "type": "string",
            "if": {
              "pattern": ".+"
            },
            "then": {
              "format": "uri",
              "pattern": "^https://"
            }
          }
        }
      }
    }
  }
}
